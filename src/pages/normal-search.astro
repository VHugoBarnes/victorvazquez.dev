<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Spotlight-like Search</title>
    <style>
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f0f0;
      }

      .search-container {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        max-width: 90%;
        z-index: 1000;
      }

      #search-input {
        width: 100%;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 20px;
        outline: none;
        background-color: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
      }

      #search-input:focus {
        background-color: rgba(255, 255, 255, 0.95);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
      }

      .modal {
        display: none;
        position: fixed;
        top: 70px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        width: 600px;
        max-width: 90%;
        z-index: 1000;
      }

      .modal-content {
        padding: 20px;
      }

      .search-types {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
      }

      .search-type {
        background-color: transparent;
        border: none;
        padding: 8px 16px;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .search-type:hover,
      .search-type.active {
        background-color: rgba(0, 0, 0, 0.1);
      }

      #search-results {
        max-height: 300px;
        overflow-y: auto;
      }

      .result-item {
        padding: 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background-color 0.2s;
      }

      .result-item:last-child {
        border-bottom: none;
      }

      .result-item:hover,
      .result-item.selected {
        background-color: rgba(0, 0, 0, 0.05);
      }

      .overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
      }
    </style>
  </head>
  <body>
    <div class="search-container">
      <input
        type="text"
        id="search-input"
        placeholder="Search for tickets, hotels, flights, tours, or packages..."
        aria-label="Search"
      />
    </div>

    <div class="overlay" id="overlay"></div>

    <div class="modal" id="search-modal">
      <div class="modal-content">
        <div class="search-types">
          <button class="search-type" data-type="tickets">Tickets</button>
          <button class="search-type" data-type="hotels">Hotels</button>
          <button class="search-type" data-type="flights">Flights</button>
          <button class="search-type" data-type="tours">Tours</button>
          <button class="search-type" data-type="packages">Packages</button>
        </div>
        <div id="search-results" role="listbox" aria-label="Search results">
        </div>
      </div>
    </div>

    <script>
      const searchInput: any = document.getElementById("search-input");
      const searchModal: any = document.getElementById("search-modal");
      const overlay: any = document.getElementById("overlay");
      const searchResults: any = document.getElementById("search-results");
      const searchTypes: any = document.querySelectorAll(".search-type");

      let activeSearchType: any = "tickets";
      let selectedResultIndex: any = -1;

      function openModal() {
        searchModal.style.display = "block";
        overlay.style.display = "block";
        performSearch();
      }

      function closeModal() {
        searchModal.style.display = "none";
        overlay.style.display = "none";
        selectedResultIndex = -1;
      }

      searchInput.addEventListener("focus", openModal);
      searchInput.addEventListener("input", performSearch);

      overlay.addEventListener("click", closeModal);

      searchTypes.forEach((button: any) => {
        button.addEventListener("click", () => {
          searchTypes.forEach((btn: any) => btn.classList.remove("active"));
          button.classList.add("active");
          activeSearchType = button.dataset.type;
          performSearch();
        });
      });

      function performSearch() {
        const query = searchInput.value.toLowerCase();
        const results = getSearchResults(query, activeSearchType);
        displayResults(results);
      }

      function getSearchResults(query: any, type: any): any {
        // This is a mock function. In a real application, you would fetch results from a server.
        const mockData: any = {
          tickets: [
            "Concert Ticket",
            "Movie Ticket",
            "Sports Event Ticket",
            "Theater Ticket",
            "Festival Pass",
          ],
          hotels: [
            "Luxury Hotel",
            "Budget Hotel",
            "Beach Resort",
            "Mountain Lodge",
            "City Center Hotel",
          ],
          flights: [
            "New York to London",
            "Tokyo to Paris",
            "Sydney to Los Angeles",
            "Berlin to Rome",
            "Dubai to Singapore",
          ],
          tours: [
            "City Walking Tour",
            "Wine Tasting Tour",
            "Historical Landmarks Tour",
            "Food and Culture Tour",
            "Adventure Hiking Tour",
          ],
          packages: [
            "All-Inclusive Resort Package",
            "City Break Package",
            "Adventure Travel Package",
            "Romantic Getaway Package",
            "Family Vacation Package",
          ],
        };

        return mockData[type].filter((item: any) =>
          item.toLowerCase().includes(query),
        );
      }

      function displayResults(results: any) {
        searchResults.innerHTML = "";
        results.forEach((result: any, index: any) => {
          const resultItem = document.createElement("div");
          resultItem.classList.add("result-item");
          resultItem.textContent = result;
          resultItem.setAttribute("role", "option");
          resultItem.setAttribute("tabindex", "0");
          resultItem.addEventListener("click", () => selectResult(result));
          resultItem.addEventListener("keydown", (e) => {
            if (e.key === "Enter") {
              selectResult(result);
            }
          });
          searchResults.appendChild(resultItem);
        });
        selectedResultIndex = -1;
      }

      function selectResult(result: any) {
        searchInput.value = result;
        closeModal();
        // Here you would typically perform an action based on the selected result
        console.log("Selected:", result);
      }

      document.addEventListener("keydown", (e) => {
        if (searchModal.style.display === "block") {
          const results = searchResults.querySelectorAll(".result-item");
          if (e.key === "ArrowDown") {
            e.preventDefault();
            selectedResultIndex = (selectedResultIndex + 1) % results.length;
            updateSelectedResult(results);
          } else if (e.key === "ArrowUp") {
            e.preventDefault();
            selectedResultIndex =
              (selectedResultIndex - 1 + results.length) % results.length;
            updateSelectedResult(results);
          } else if (e.key === "Enter" && selectedResultIndex !== -1) {
            selectResult(results[selectedResultIndex].textContent);
          } else if (e.key === "Escape") {
            closeModal();
          }
        }
      });

      function updateSelectedResult(results: any) {
        results.forEach((result: any, index: any) => {
          if (index === selectedResultIndex) {
            result.classList.add("selected");
            result.setAttribute("aria-selected", "true");
            result.scrollIntoView({ block: "nearest" });
          } else {
            result.classList.remove("selected");
            result.setAttribute("aria-selected", "false");
          }
        });
      }

      // Initialize with 'tickets' as the active search type
      searchTypes[0].classList.add("active");
    </script>
  </body>
</html>
